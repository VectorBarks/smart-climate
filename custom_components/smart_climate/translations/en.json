{
  "config": {
    "step": {
      "user": {
        "title": "Smart Climate Control Setup",
        "description": "Configure your Smart Climate Control integration",
        "data": {
          "climate_entity": "Climate Entity",
          "room_sensor": "Room Temperature Sensor",
          "outdoor_sensor": "Outdoor Temperature Sensor (Optional)",
          "power_sensor": "Power Sensor (Optional)",
          "max_offset": "Maximum Temperature Offset (°C)",
          "min_temperature": "Minimum Temperature (°C)",
          "max_temperature": "Maximum Temperature (°C)",
          "update_interval": "Update Interval (seconds)",
          "ml_enabled": "Enable ML Learning",
          "away_temperature": "Away Mode Temperature (°C)",
          "sleep_offset": "Sleep Mode Temperature Offset (°C)",
          "boost_offset": "Boost Mode Cooling Offset (°C)",
          "gradual_adjustment_rate": "Gradual Adjustment Rate (°C per update)",
          "feedback_delay": "Learning Feedback Delay (seconds)",
          "enable_learning": "Enable Learning System",
          "power_idle_threshold": "Power Idle Threshold (W)",
          "power_min_threshold": "Power Minimum Threshold (W)",
          "power_max_threshold": "Power Maximum Threshold (W)",
          "default_target_temperature": "Default Target Temperature (°C)",
          "enable_retry": "Enable Retry on Startup",
          "max_retry_attempts": "Maximum Retry Attempts",
          "initial_timeout": "Initial Timeout (seconds)",
          "save_interval": "Data Save Interval (seconds)"
        },
        "data_description": {
          "climate_entity": "Select the climate entity you want to control",
          "room_sensor": "Select the temperature sensor for the room",
          "outdoor_sensor": "Select an outdoor temperature sensor for better predictions",
          "power_sensor": "Select a power sensor to detect when the AC is running",
          "max_offset": "Maximum temperature offset to apply (safety limit)",
          "min_temperature": "Minimum temperature the system can set",
          "max_temperature": "Maximum temperature the system can set", 
          "update_interval": "How often to update the offset calculation",
          "ml_enabled": "Enable machine learning for better offset predictions",
          "away_temperature": "Fixed temperature to maintain when Away mode is active",
          "sleep_offset": "Additional temperature offset applied during Sleep/Night mode for quieter operation",
          "boost_offset": "Aggressive cooling offset applied during Boost mode (negative value)",
          "gradual_adjustment_rate": "Maximum temperature change per update cycle to prevent oscillation",
          "feedback_delay": "Time to wait after temperature adjustment before recording learning feedback",
          "enable_learning": "Enable the lightweight learning system to improve offset predictions over time",
          "power_idle_threshold": "Power consumption below this value indicates the AC is idle or off",
          "power_min_threshold": "Power consumption below this value indicates the AC is running at minimum capacity",
          "power_max_threshold": "Power consumption above this value indicates the AC is running at high capacity",
          "default_target_temperature": "Initial temperature setting when wrapped entity has no target temperature or is unavailable",
          "enable_retry": "Enable automatic retry when sensors are unavailable during Home Assistant startup",
          "max_retry_attempts": "Maximum number of retry attempts before giving up (1-10)",
          "initial_timeout": "Time to wait before first retry attempt (30-300 seconds)",
          "save_interval": "How frequently to save learning data to disk (300-86400 seconds, default 3600 = 1 hour)"
        }
      }
    },
    "error": {
      "entity_not_found": "Selected entity was not found",
      "already_configured": "This climate entity is already configured",
      "no_climate_entities": "No climate entities found in your Home Assistant",
      "no_temperature_sensors": "No temperature sensors found in your Home Assistant",
      "invalid_temperature_range": "Invalid temperature range specified",
      "away_temperature_out_of_range": "Away temperature must be between the minimum and maximum temperatures",
      "power_threshold_invalid": "Power thresholds must be in order: idle < minimum < maximum"
    },
    "abort": {
      "already_configured": "This climate entity is already configured"
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "Smart Climate Control Options",
        "description": "Adjust settings for your Smart Climate Control integration",
        "data": {
          "max_offset": "Maximum Temperature Offset (°C)",
          "min_temperature": "Minimum Temperature (°C)",
          "max_temperature": "Maximum Temperature (°C)",
          "update_interval": "Update Interval (seconds)",
          "ml_enabled": "Enable ML Learning",
          "away_temperature": "Away Mode Temperature (°C)",
          "sleep_offset": "Sleep Mode Temperature Offset (°C)",
          "boost_offset": "Boost Mode Cooling Offset (°C)",
          "gradual_adjustment_rate": "Gradual Adjustment Rate (°C per update)",
          "feedback_delay": "Learning Feedback Delay (seconds)",
          "enable_learning": "Enable Learning System",
          "power_idle_threshold": "Power Idle Threshold (W)",
          "power_min_threshold": "Power Minimum Threshold (W)",
          "power_max_threshold": "Power Maximum Threshold (W)",
          "default_target_temperature": "Default Target Temperature (°C)",
          "enable_retry": "Enable Retry on Startup",
          "max_retry_attempts": "Maximum Retry Attempts",
          "initial_timeout": "Initial Timeout (seconds)",
          "save_interval": "Data Save Interval (seconds)"
        },
        "data_description": {
          "max_offset": "Maximum temperature offset to apply (safety limit)",
          "min_temperature": "Minimum temperature the system can set",
          "max_temperature": "Maximum temperature the system can set", 
          "update_interval": "How often to update the offset calculation",
          "ml_enabled": "Enable machine learning for better offset predictions",
          "away_temperature": "Fixed temperature to maintain when Away mode is active",
          "sleep_offset": "Additional temperature offset applied during Sleep/Night mode for quieter operation",
          "boost_offset": "Aggressive cooling offset applied during Boost mode (negative value)",
          "gradual_adjustment_rate": "Maximum temperature change per update cycle to prevent oscillation",
          "feedback_delay": "Time to wait after temperature adjustment before recording learning feedback",
          "enable_learning": "Enable the lightweight learning system to improve offset predictions over time",
          "power_idle_threshold": "Power consumption below this value indicates the AC is idle or off",
          "power_min_threshold": "Power consumption below this value indicates the AC is running at minimum capacity",
          "power_max_threshold": "Power consumption above this value indicates the AC is running at high capacity",
          "default_target_temperature": "Initial temperature setting when wrapped entity has no target temperature or is unavailable",
          "enable_retry": "Enable automatic retry when sensors are unavailable during Home Assistant startup",
          "max_retry_attempts": "Maximum number of retry attempts before giving up (1-10)",
          "initial_timeout": "Time to wait before first retry attempt (30-300 seconds)",
          "save_interval": "How frequently to save learning data to disk (300-86400 seconds, default 3600 = 1 hour)"
        }
      }
    }
  },
  "entity": {
    "button": {
      "reset_training_data": {
        "name": "Reset Training Data",
        "description": "Clear all learned patterns and start fresh with training"
      }
    }
  },
  "services": {
    "generate_dashboard": {
      "name": "Generate Dashboard",
      "description": "Generate a customized dashboard YAML for your Smart Climate device",
      "fields": {
        "climate_entity_id": {
          "name": "Climate Entity",
          "description": "The Smart Climate entity to generate a dashboard for"
        }
      }
    }
  }
}