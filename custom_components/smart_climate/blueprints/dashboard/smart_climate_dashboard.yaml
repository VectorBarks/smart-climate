blueprint:
  name: Smart Climate Dashboard
  description: Complete visualization dashboard for Smart Climate Control
  domain: lovelace
  input:
    climate_entity:
      name: Smart Climate Entity
      description: Select your Smart Climate entity
      selector:
        entity:
          filter:
            integration: smart_climate
            domain: climate
    learning_switch:
      name: Learning Switch
      description: Select the learning switch for this climate
      selector:
        entity:
          filter:
            integration: smart_climate
            domain: switch
    room_sensor:
      name: Room Temperature Sensor
      description: Select the room temperature sensor used by Smart Climate
      selector:
        entity:
          filter:
            domain: sensor
            device_class: temperature
    power_sensor:
      name: Power Sensor (Optional)
      description: Select the power consumption sensor if available
      default: "sensor.not_configured"
      selector:
        entity:
          filter:
            domain: sensor
            device_class: power

# Dashboard configuration starts here
# This will be expanded by other agents with:
# - Template sensors (Agent 2)
# - Card layouts (Agent 4)
# - Conditional cards (Agent 5)
# - Responsive layouts (Agent 6)

cards:
      # AGENT 6 RESPONSIVE: Main responsive container
      # Uses a single column layout that works well on all devices
      - type: vertical-stack
        cards:
          # AGENT 6 RESPONSIVE: Current Status Section
          # Mobile-first design with responsive gauge layout
          - type: vertical-stack
            title: Current Status
            cards:
              # Climate control card - full width on all devices
              - type: climate
                entity: !input climate_entity
                name: Smart Climate Control
              
              # AGENT 6 RESPONSIVE: Gauge grid - responsive 2x2 layout
              # On mobile: 2 columns, smaller gauges
              # On desktop: Still 2x2 but with more spacing
              - type: grid
                columns: 2
                square: false
                cards:
              # Current Offset Gauge
              - type: gauge
                entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history
                name: Current Offset
                min: -5
                max: 5
                unit: "°C"
                severity:
                  green: -1.5
                  yellow: -3
                  red: -5
                segments:
                  - from: -5
                    color: "#db4437"
                  - from: -3
                    color: "#ffa600"
                  - from: -1.5
                    color: "#f5f5f5"
                  - from: 1.5
                    color: "#f5f5f5"
                  - from: 3
                    color: "#ffa600"
                  - from: 4.5
                    color: "#db4437"
              
              # Learning Accuracy Gauge
              - type: gauge
                entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
                name: Learning Accuracy
                min: 0
                max: 100
                unit: "%"
                severity:
                  green: 80
                  yellow: 60
                  red: 0
              
              # Confidence Level Gauge
              - type: gauge
                entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
                attribute: confidence_level
                name: Confidence Level
                min: 0
                max: 100
                unit: "%"
                severity:
                  green: 70
                  yellow: 40
                  red: 0

      # AGENT 4 CARDS: Learning Progress Section
      - type: vertical-stack
        title: Learning Progress
        cards:
          # Progress Overview
          - type: entities
            title: Learning Statistics
            entities:
              - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_learning_progress
                name: Overall Progress
                icon: mdi:progress-check
              - entity: !input learning_switch
                name: Learning Enabled
              - type: attribute
                entity: !input learning_switch
                attribute: samples_collected
                name: Samples Collected
                icon: mdi:database
              - type: attribute
                entity: !input learning_switch
                attribute: last_updated
                name: Last Update
                icon: mdi:clock-outline
          
          # Historical Charts (using core history-graph, Agent 5 will add enhanced versions)
          - type: history-graph
            title: Offset History (24h)
            entities:
              - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history
                name: Temperature Offset
            hours_to_show: 24
            refresh_interval: 60
            
          # AGENT 5 COMPATIBILITY: Enhanced offset history with ApexCharts
          - type: conditional
            conditions:
              - entity: sensor.smart_climate_custom_cards_available
                state_not: core_only
            card:
              type: custom:apexcharts-card
              header:
                show: true
                title: Offset History (24h)
                show_states: true
                colorize_states: true
              graph_span: 24h
              span:
                end: hour
              yaxis:
                - min: -5
                  max: 5
                  decimals: 1
                  apex_config:
                    title:
                      text: "Offset (°C)"
              series:
                - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history
                  name: Temperature Offset
                  color: "#44739e"
                  show:
                    legend_value: false
                  group_by:
                    func: avg
                    duration: 10min
                  stroke_width: 2
          
          - type: history-graph
            title: Accuracy Trend (7 days)
            entities:
              - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
                name: Learning Accuracy
            hours_to_show: 168
            refresh_interval: 300
            
          # AGENT 5 COMPATIBILITY: Enhanced accuracy trend with ApexCharts
          - type: conditional
            conditions:
              - entity: sensor.smart_climate_custom_cards_available
                state_not: core_only
            card:
              type: custom:apexcharts-card
              header:
                show: true
                title: Accuracy Trend (7 days)
                show_states: true
                colorize_states: true
              graph_span: 7d
              yaxis:
                - min: 0
                  max: 100
                  decimals: 0
                  apex_config:
                    title:
                      text: "Accuracy (%)"
              series:
                - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
                  name: Learning Accuracy
                  color: "#00b4d8"
                  show:
                    legend_value: true
                  group_by:
                    func: avg
                    duration: 1h
                  stroke_width: 3
                  type: line
                  fill_raw: last

      # AGENT 4 CARDS: Calibration & Hysteresis Section
      - type: vertical-stack
        title: Calibration & Hysteresis
        cards:
          # Status Information
          - type: entities
            title: System Status
            entities:
              - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_calibration_status
                name: Calibration Status
              - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_hysteresis_state
                name: AC Behavior State
              - type: attribute
                entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_hysteresis_state
                attribute: start_threshold
                name: AC Start Threshold
                icon: mdi:thermometer-chevron-up
              - type: attribute
                entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_hysteresis_state
                attribute: stop_threshold
                name: AC Stop Threshold
                icon: mdi:thermometer-chevron-down
          
          # Power and Temperature Correlation
          - type: history-graph
            title: Power & Temperature Correlation
            entities:
              - entity: !input climate_entity
                name: Target Temperature
              - entity: !input room_sensor
                name: Room Temperature
              - entity: !input power_sensor
                name: Power Usage
            hours_to_show: 12
            refresh_interval: 60

      # AGENT 4 CARDS: Control Section
      - type: vertical-stack
        title: Control Panel
        cards:
          # Mode Selection Buttons
          - type: horizontal-stack
            cards:
              - type: button
                name: Normal
                icon: mdi:home-thermometer
                tap_action:
                  action: call-service
                  service: climate.set_preset_mode
                  service_data:
                    entity_id: !input climate_entity
                    preset_mode: "none"
                hold_action:
                  action: more-info
              
              - type: button
                name: Away
                icon: mdi:home-export-outline
                tap_action:
                  action: call-service
                  service: climate.set_preset_mode
                  service_data:
                    entity_id: !input climate_entity
                    preset_mode: "away"
                hold_action:
                  action: more-info
              
              - type: button
                name: Sleep
                icon: mdi:bed
                tap_action:
                  action: call-service
                  service: climate.set_preset_mode
                  service_data:
                    entity_id: !input climate_entity
                    preset_mode: "sleep"
                hold_action:
                  action: more-info
              
              - type: button
                name: Boost
                icon: mdi:rocket-launch
                tap_action:
                  action: call-service
                  service: climate.set_preset_mode
                  service_data:
                    entity_id: !input climate_entity
                    preset_mode: "boost"
                hold_action:
                  action: more-info
          
          # Manual Controls
          - type: entities
            title: Manual Adjustments
            entities:
              - entity: number.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_manual_offset
                name: Manual Offset Override
                icon: mdi:tune
              - type: attribute
                entity: !input climate_entity
                attribute: update_interval
                name: Update Interval
                suffix: seconds
                icon: mdi:timer-outline
          
          # Reset Button
          - type: button
            name: Reset Training Data
            icon: mdi:restart
            icon_color: red
            tap_action:
              action: call-service
              service: button.press
              service_data:
                entity_id: button.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_reset_training
            hold_action:
              action: none
            confirmation:
              text: Are you sure you want to reset all training data? This action cannot be undone.

# END OF AGENT 4 CARDS SECTION

# Placeholder sections for other agents:

# AGENT 2: Template sensors section
# Template sensors transform entity attributes into dashboard-friendly formats

# Template sensors for data transformation and visualization
template:
  - sensor:
      # Offset History Sensor - tracks current offset and historical changes
      - unique_id: "smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history"
        name: "{{ climate_entity.name }} Offset History"
        state: >
          {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
          {% if climate and climate.attributes.current_offset is defined %}
            {{ climate.attributes.current_offset | float(0) | round(1) }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "°C"
        device_class: temperature
        state_class: measurement
        availability: >
          {{ states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] is not none }}
        attributes:
          offset_changes: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {% if climate and climate.attributes.offset_history is defined %}
              {{ climate.attributes.offset_history | default([]) }}
            {% else %}
              []
            {% endif %}
          last_update: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {{ climate.last_updated if climate else 'unknown' }}
          trend: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {% if climate and climate.attributes.current_offset is defined and climate.attributes.last_offset is defined %}
              {% set current = climate.attributes.current_offset | float(0) %}
              {% set last = climate.attributes.last_offset | float(0) %}
              {% if current > last %}
                increasing
              {% elif current < last %}
                decreasing
              {% else %}
                stable
              {% endif %}
            {% else %}
              unknown
            {% endif %}

      # Learning Progress Sensor - shows percentage of learning completion
      - unique_id: "smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_learning_progress"
        name: "{{ climate_entity.name }} Learning Progress"
        state: >
          {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
          {% if switch and switch.attributes.samples_collected is defined %}
            {% set samples = switch.attributes.samples_collected | int(0) %}
            {% set target = 100 %}
            {{ ((samples / target) * 100) | round(1) | min(100) }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: "%"
        state_class: measurement
        availability: >
          {{ states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] is not none }}
        attributes:
          samples_collected: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.samples_collected | int(0) if switch else 0 }}
          target_samples: 100
          has_sufficient_data: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.has_sufficient_data | default(false) if switch else false }}

      # Accuracy Trend Sensor - tracks learning accuracy over time
      - unique_id: "smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend"
        name: "{{ climate_entity.name }} Accuracy Trend"
        state: >
          {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
          {% if switch and switch.attributes.learning_accuracy is defined and switch.attributes.samples_collected | int(0) >= 10 %}
            {{ switch.attributes.learning_accuracy | float(0) | round(1) }}
          {% else %}
            unavailable
          {% endif %}
        unit_of_measurement: "%"
        state_class: measurement
        availability: >
          {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
          {{ switch is not none and switch.attributes.samples_collected | int(0) >= 10 }}
        attributes:
          current_accuracy: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.learning_accuracy | float(0) | round(1) if switch else 0 }}
          confidence_level: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.confidence_level | float(0) | round(1) if switch else 0 }}
          trend_direction: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {% if switch and switch.attributes.learning_accuracy is defined %}
              {% set accuracy = switch.attributes.learning_accuracy | float(0) %}
              {% if accuracy > 80 %}
                excellent
              {% elif accuracy > 60 %}
                improving
              {% else %}
                learning
              {% endif %}
            {% else %}
              unknown
            {% endif %}

      # Calibration Status Sensor - shows calibration phase status
      - unique_id: "smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_calibration_status"
        name: "{{ climate_entity.name }} Calibration Status"
        state: >
          {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
          {% if climate and climate.attributes.calibration_active is defined %}
            {% if climate.attributes.calibration_active %}
              Calibrating ({{ climate.attributes.calibration_samples | int(0) }}/10)
            {% else %}
              Ready
            {% endif %}
          {% else %}
            Unknown
          {% endif %}
        availability: >
          {{ states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] is not none }}
        icon: >
          {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
          {% if climate and climate.attributes.calibration_active %}
            {% set samples = climate.attributes.calibration_samples | int(0) %}
            {% if samples < 10 %}
              mdi:progress-clock
            {% else %}
              mdi:check-circle
            {% endif %}
          {% else %}
            mdi:check-circle-outline
          {% endif %}
        attributes:
          progress_percentage: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {% if climate and climate.attributes.calibration_samples is defined %}
              {% set samples = climate.attributes.calibration_samples | int(0) %}
              {{ (samples / 10 * 100) | round(0) }}
            {% else %}
              0
            {% endif %}
          samples_collected: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {{ climate.attributes.calibration_samples | int(0) if climate else 0 }}
          samples_needed: 10
          calibration_active: >
            {% set climate = states[climate_entity.entity_id.split('.')[0]][climate_entity.entity_id.split('.')[1]] %}
            {{ climate.attributes.calibration_active | default(false) if climate else false }}

      # Hysteresis State Sensor - shows AC behavior learning state
      - unique_id: "smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_hysteresis_state"
        name: "{{ climate_entity.name }} Hysteresis State"
        state: >
          {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
          {% if switch and switch.attributes.hysteresis_state is defined %}
            {{ switch.attributes.hysteresis_state }}
          {% else %}
            No power sensor
          {% endif %}
        availability: >
          {{ states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] is not none }}
        icon: >
          {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
          {% if switch and switch.attributes.hysteresis_state is defined %}
            {% set state = switch.attributes.hysteresis_state %}
            {% set icon_map = {
              'Learning AC behavior': 'mdi:brain',
              'AC actively cooling': 'mdi:snowflake',
              'AC should start soon': 'mdi:thermometer-alert',
              'AC recently stopped': 'mdi:pause-circle',
              'Temperature stable': 'mdi:check-circle',
              'No power sensor': 'mdi:power-plug-off',
              'Ready': 'mdi:check-decagram',
              'Error': 'mdi:alert-circle'
            } %}
            {{ icon_map.get(state, 'mdi:help-circle') }}
          {% else %}
            mdi:help-circle
          {% endif %}
        attributes:
          start_threshold: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.learned_start_threshold | default('Not available') if switch else 'Not available' }}
          stop_threshold: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.learned_stop_threshold | default('Not available') if switch else 'Not available' }}
          temperature_window: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.temperature_window | default('Not available') if switch else 'Not available' }}
          start_samples_collected: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.start_samples_collected | int(0) if switch else 0 }}
          stop_samples_collected: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.stop_samples_collected | int(0) if switch else 0 }}
          hysteresis_ready: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.hysteresis_ready | default(false) if switch else false }}
          hysteresis_enabled: >
            {% set switch = states[learning_switch.entity_id.split('.')[0]][learning_switch.entity_id.split('.')[1]] %}
            {{ switch.attributes.hysteresis_enabled | default(false) if switch else false }}

# AGENT 4: Dashboard cards section
# Main dashboard cards including gauges, charts, and controls

# AGENT 5 COMPATIBILITY: Card compatibility section
# Conditional cards that work with both core and custom cards

# Custom card detection sensor - checks which custom cards are available
# This sensor will be created as part of the template sensors above
      - unique_id: "smart_climate_custom_cards_available"
        name: "Smart Climate Custom Cards Available"
        state: >
          {% set ns = namespace(cards=[]) %}
          {% set resources = states.lovelace | selectattr('attributes.resources', 'defined') | map(attribute='attributes.resources') | list %}
          {% if resources %}
            {% for resource in resources[0] %}
              {% if 'apexcharts-card' in resource.url | default('') %}
                {% set ns.cards = ns.cards + ['apexcharts'] %}
              {% elif 'mushroom' in resource.url | default('') %}
                {% set ns.cards = ns.cards + ['mushroom'] %}
              {% elif 'button-card' in resource.url | default('') %}
                {% set ns.cards = ns.cards + ['button'] %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {{ ns.cards | join(',') if ns.cards else 'core_only' }}
        icon: >
          {% if is_state('sensor.smart_climate_custom_cards_available', 'core_only') %}
            mdi:card-outline
          {% else %}
            mdi:card-multiple
          {% endif %}
        attributes:
          has_apexcharts: >
            {{ 'apexcharts' in states('sensor.smart_climate_custom_cards_available') }}
          has_mushroom: >
            {{ 'mushroom' in states('sensor.smart_climate_custom_cards_available') }}
          has_button_card: >
            {{ 'button' in states('sensor.smart_climate_custom_cards_available') }}
          detected_cards: >
            {{ states('sensor.smart_climate_custom_cards_available').split(',') if states('sensor.smart_climate_custom_cards_available') != 'core_only' else [] }}

# AGENT 5 COMPATIBILITY: Enhanced Control Cards
# These provide better visual feedback and interaction when custom cards are available
      
      # Enhanced Mode Selection with Button Cards
      - type: conditional
        conditions:
          - entity: sensor.smart_climate_custom_cards_available
            state_not: core_only
        card:
          type: vertical-stack
          title: Enhanced Control Panel
          cards:
            - type: horizontal-stack
              cards:
                # Enhanced Normal Mode Button
                - type: custom:button-card
                  name: Normal
                  icon: mdi:home-thermometer
                  entity: !input climate_entity
                  show_state: false
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "none"
                  state:
                    - value: "none"
                      operator: template
                      value: |
                        return states['!input climate_entity'].attributes.preset_mode === 'none'
                      styles:
                        card:
                          - background-color: "rgba(var(--rgb-primary-color), 0.2)"
                          - border: "2px solid var(--primary-color)"
                        icon:
                          - color: var(--primary-color)
                  styles:
                    card:
                      - height: 80px
                      - border-radius: var(--ha-card-border-radius)
                    name:
                      - font-size: 14px
                      
                # Enhanced Away Mode Button
                - type: custom:button-card
                  name: Away
                  icon: mdi:home-export-outline
                  entity: !input climate_entity
                  show_state: false
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "away"
                  state:
                    - value: "away"
                      operator: template
                      value: |
                        return states['!input climate_entity'].attributes.preset_mode === 'away'
                      styles:
                        card:
                          - background-color: "rgba(var(--rgb-warning-color), 0.2)"
                          - border: "2px solid var(--warning-color)"
                        icon:
                          - color: var(--warning-color)
                  styles:
                    card:
                      - height: 80px
                      - border-radius: var(--ha-card-border-radius)
                    name:
                      - font-size: 14px
                      
                # Enhanced Sleep Mode Button
                - type: custom:button-card
                  name: Sleep
                  icon: mdi:bed
                  entity: !input climate_entity
                  show_state: false
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "sleep"
                  state:
                    - value: "sleep"
                      operator: template
                      value: |
                        return states['!input climate_entity'].attributes.preset_mode === 'sleep'
                      styles:
                        card:
                          - background-color: "rgba(var(--rgb-info-color), 0.2)"
                          - border: "2px solid var(--info-color)"
                        icon:
                          - color: var(--info-color)
                  styles:
                    card:
                      - height: 80px
                      - border-radius: var(--ha-card-border-radius)
                    name:
                      - font-size: 14px
                      
                # Enhanced Boost Mode Button  
                - type: custom:button-card
                  name: Boost
                  icon: mdi:rocket-launch
                  entity: !input climate_entity
                  show_state: false
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "boost"
                  state:
                    - value: "boost"
                      operator: template
                      value: |
                        return states['!input climate_entity'].attributes.preset_mode === 'boost'
                      styles:
                        card:
                          - background-color: "rgba(var(--rgb-error-color), 0.2)"
                          - border: "2px solid var(--error-color)"
                        icon:
                          - color: var(--error-color)
                          - animation: pulse 2s infinite
                  styles:
                    card:
                      - height: 80px
                      - border-radius: var(--ha-card-border-radius)
                    name:
                      - font-size: 14px

      # Enhanced Power/Temperature Correlation Chart
      - type: conditional
        conditions:
          - entity: sensor.smart_climate_custom_cards_available
            state_not: core_only
          - entity: !input power_sensor
            state_not: unavailable
        card:
          type: custom:apexcharts-card
          header:
            show: true
            title: Power vs Temperature Correlation
            show_states: false
          graph_span: 12h
          apex_config:
            chart:
              height: 300
              toolbar:
                show: true
                tools:
                  zoom: true
                  pan: true
          all_series_config:
            stroke_width: 2
          yaxis:
            - id: temp
              apex_config:
                title:
                  text: "Temperature (°C)"
                labels:
                  style:
                    colors: "#ff6b6b"
            - id: power
              opposite: true
              apex_config:
                title:
                  text: "Power (W)"
                labels:
                  style:
                    colors: "#4ecdc4"
          series:
            - entity: !input climate_entity
              attribute: current_temperature
              name: Room Temperature
              yaxis_id: temp
              color: "#ff6b6b"
              type: line
              group_by:
                func: avg
                duration: 5min
            - entity: !input power_sensor
              name: Power Consumption
              yaxis_id: power
              color: "#4ecdc4"
              type: area
              opacity: 0.3
              group_by:
                func: avg
                duration: 5min

# AGENT 6 RESPONSIVE: Responsive layout implementation
# Since HA doesn't have true responsive breakpoints, we use several strategies:
# 1. Grid cards that automatically adjust columns based on available space
# 2. Conditional cards based on device type detection (when browser-mod available)
# 3. Mobile-first design that works well on all screen sizes

# AGENT 6 RESPONSIVE: Add responsive view layout configuration
view_type: masonry
view_layout:
  cards: []

# AGENT 6 RESPONSIVE: Enhanced layout recommendations
# Users can improve responsiveness by:
# 1. Installing browser-mod for device type detection
# 2. Installing layout-card for advanced responsive layouts
# 3. Using the custom:grid-layout card for true responsive grids

# AGENT 6 RESPONSIVE: Mobile-optimized alternative layouts
# Add these conditional cards at the end to provide better mobile experience
      
      # AGENT 6 RESPONSIVE: Mobile-friendly gauge layout
      # This replaces the standard gauges with a more compact mobile version
      - type: conditional
        conditions:
          - entity: sensor.smart_climate_custom_cards_available
            state: core_only
        card:
          type: entities
          title: Smart Climate Metrics
          show_header_toggle: false
          entities:
            # Compact display of key metrics for mobile
            - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history
              name: Current Offset
              icon: mdi:thermometer-lines
            - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_learning_progress
              name: Learning Progress
              icon: mdi:school
            - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
              name: Accuracy
              icon: mdi:target
            - type: attribute
              entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_accuracy_trend
              attribute: confidence_level
              name: Confidence Level
              icon: mdi:shield-check
            - type: divider
            - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_calibration_status
              name: Calibration Status
            - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_hysteresis_state
              name: AC Behavior

      # AGENT 6 RESPONSIVE: Simplified mobile controls
      # Single column layout for better touch targets on mobile
      - type: conditional
        conditions:
          - entity: sensor.smart_climate_custom_cards_available
            state: core_only
        card:
          type: vertical-stack
          title: Quick Controls
          cards:
            # Mode buttons in vertical layout for mobile
            - type: entities
              show_header_toggle: false
              entities:
                - type: button
                  name: Normal Mode
                  icon: mdi:home-thermometer
                  action_name: SET
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "none"
                - type: button
                  name: Away Mode
                  icon: mdi:home-export-outline
                  action_name: SET
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "away"
                - type: button
                  name: Sleep Mode
                  icon: mdi:bed
                  action_name: SET
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "sleep"
                - type: button
                  name: Boost Mode
                  icon: mdi:rocket-launch
                  action_name: SET
                  tap_action:
                    action: call-service
                    service: climate.set_preset_mode
                    service_data:
                      entity_id: !input climate_entity
                      preset_mode: "boost"

      # AGENT 6 RESPONSIVE: Compact chart display for mobile
      # Reduces the number of history graphs shown simultaneously
      - type: conditional
        conditions:
          - entity: sensor.smart_climate_custom_cards_available
            state: core_only
        card:
          type: vertical-stack
          title: Trends
          cards:
            # Single consolidated history graph for mobile
            - type: history-graph
              entities:
                - entity: sensor.smart_climate_{{ climate_entity.entity_id | replace('.', '_') }}_offset_history
                  name: Offset
                - entity: !input room_sensor
                  name: Room Temp
              hours_to_show: 6
              refresh_interval: 60

# AGENT 6 RESPONSIVE: Dashboard customization notes
# The above conditional cards provide fallback layouts for mobile devices
# Users can further customize by:
# 1. Adjusting grid columns based on their screen size
# 2. Using custom:swipe-card for mobile navigation between sections
# 3. Implementing custom:state-switch based on device_class detection